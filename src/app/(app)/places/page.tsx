
'use client';

import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Textarea } from '@/components/ui/textarea';
import Image from 'next/image';
import { Search, Star, Camera, ThumbsUp, MessageSquare, MapPin, Sparkles, Loader2 } from 'lucide-react';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "@/components/ui/carousel";
import { findPlaces } from '@/ai/flows/find-places';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import Link from 'next/link';
import { useAuth } from '@/contexts/auth-context';

const initialPlacesData = {
    'Darjeeling': [
      {
        id: 1,
        name: 'Glenary\'s Bakery & Cafe',
        category: 'Cafe & Restaurant',
        rating: 4.6,
        reviewCount: 3800,
        address: 'Nehru Road, Darjeeling',
        images: [
          'https://picsum.photos/seed/glenarys1/800/600',
          'https://picsum.photos/seed/glenarys2/800/600',
          'https://picsum.photos/seed/glenarys3/800/600',
        ],
        justification: "A famous colonial-era restaurant known for its bakery and views.",
        reviews: [
          {
            author: 'Rohan',
            avatar: 'https://picsum.photos/seed/person2/48/48',
            rating: 5,
            comment: 'An absolute must-visit in Darjeeling! The bakery items are fresh and delicious. The view from the upstairs restaurant is breathtaking. A bit crowded, but worth it.',
          },
          {
            author: 'Ananya',
            avatar: 'https://picsum.photos/seed/person4/48/48',
            rating: 4,
            comment: 'Great place for breakfast. Their English breakfast is famous for a reason. The service can be a bit slow when it\'s busy.',
          },
        ],
      },
      {
        id: 2,
        name: 'Himalayan Mountaineering Institute',
        category: 'Museum & Institution',
        rating: 4.8,
        reviewCount: 5200,
        address: 'Jawahar Parbat, Darjeeling',
        images: [
            'https://picsum.photos/seed/hmi1/800/600',
            'https://picsum.photos/seed/hmi2/800/600',
        ],
        justification: "An inspiring museum about the history of mountaineering.",
        reviews: [
             {
            author: 'Tenzin',
            avatar: 'https://picsum.photos/seed/person5/48/48',
            rating: 5,
            comment: 'A truly inspiring place. The museum is incredibly well-maintained and provides a fascinating look into the history of mountaineering. The Everest section is a highlight.',
          },
        ]
      }
    ],
    'default': [
        {
        id: 10,
        name: 'Default Cafe',
        category: 'Cafe',
        rating: 4.5,
        reviewCount: 100,
        address: '123 Main St, Anytown',
        images: ['https://picsum.photos/seed/default_cafe/800/600'],
        justification: 'A popular local spot.',
        reviews: [],
        }
    ]
};

export default function PlacesPage() {
  const { location } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [places, setPlaces] = useState<any[]>([]);
  const [selectedPlace, setSelectedPlace] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    const defaultPlaces = initialPlacesData[location as keyof typeof initialPlacesData] || initialPlacesData.default;
    setPlaces(defaultPlaces);
    setSelectedPlace(defaultPlaces[0]);
  }, [location]);

  const handleSearch = async () => {
    if (!searchQuery) {
        const defaultPlaces = initialPlacesData[location as keyof typeof initialPlacesData] || initialPlacesData.default;
        setPlaces(defaultPlaces);
        setSelectedPlace(defaultPlaces[0]);
        return;
    }
    if (!location) {
        toast({
            title: "No location set",
            description: "Please set a location in your preferences to search for places.",
            variant: "destructive"
        });
        return;
    }

    setIsLoading(true);
    setSelectedPlace(null);
    setPlaces([]);

    try {
        const result = await findPlaces({ query: searchQuery, location });
        if (result.places && result.places.length > 0) {
            setPlaces(result.places.map(p => ({...p, reviews: []}))); // Reviews are not generated by this flow
            setSelectedPlace(result.places[0]);
        } else {
            toast({
                title: "No places found",
                description: "The AI couldn't find any recommendations for your query. Try being more specific!",
            });
            const defaultPlaces = initialPlacesData[location as keyof typeof initialPlacesData] || initialPlacesData.default;
            setPlaces(defaultPlaces);
            setSelectedPlace(defaultPlaces[0]);
        }
    } catch(error) {
        console.error("Failed to find places:", error);
        toast({
            title: "Search Failed",
            description: "Something went wrong while searching for places. Please try again.",
            variant: "destructive",
        });
        const defaultPlaces = initialPlacesData[location as keyof typeof initialPlacesData] || initialPlacesData.default;
        setPlaces(defaultPlaces);
        setSelectedPlace(defaultPlaces[0]);
    } finally {
        setIsLoading(false);
    }
  };

  const handleSelectPlace = (place: any) => {
    setSelectedPlace(place);
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
      {/* Left Column: Search and List */}
      <div className="lg:col-span-1 flex flex-col gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="font-headline flex items-center gap-2"><Sparkles className="text-primary"/> AI Place Finder</CardTitle>
            <CardDescription>Use natural language to find places in {location}. Try "quiet cafe with good view" or "place to buy local tea".</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex w-full items-center space-x-2">
                <Input 
                    type="text" 
                    placeholder="e.g., 'A spot for sunrise photos'"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
                />
                <Button onClick={handleSearch} disabled={isLoading}>
                    {isLoading ? <Loader2 className="h-4 w-4 animate-spin"/> : <Search className="h-4 w-4"/>}
                </Button>
            </div>
          </CardContent>
        </Card>
        
        <div className="space-y-4">
            {isLoading && (
                <>
                    <Skeleton className="h-24 w-full" />
                    <Skeleton className="h-24 w-full" />
                    <Skeleton className="h-24 w-full" />
                </>
            )}
            {!isLoading && places.map((place, i) => (
                 <Card 
                    key={place.id}
                    className={`cursor-pointer transition-all duration-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in-up ${selectedPlace?.id === place.id ? 'border-primary shadow-lg ring-2 ring-primary' : ''}`}
                    onClick={() => handleSelectPlace(place)}
                    style={{ animationDelay: `${i * 100}ms`}}
                >
                    <CardContent className="p-4 flex items-start gap-4">
                        <Image src={place.images[0]} alt={place.name} width={80} height={80} className="rounded-md aspect-square object-cover" />
                        <div className="flex-grow">
                            <p className="font-semibold">{place.name}</p>
                            <p className="text-sm text-muted-foreground">{place.category}</p>
                            <div className="flex items-center gap-1 text-sm mt-1">
                                <Star className="w-4 h-4 text-accent fill-accent"/>
                                <span className="font-bold">{place.rating}</span>
                                <span className="text-muted-foreground">({place.reviewCount})</span>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            ))}
        </div>
      </div>

      {/* Right Column: Place Details */}
      <div className="lg:col-span-2">
        {selectedPlace ? (
            <Card className="h-full animate-fade-in">
                <CardHeader>
                    <Carousel className="w-full">
                        <CarouselContent>
                            {selectedPlace.images.map((img: string, index: number) => (
                                <CarouselItem key={index}>
                                    <div className="relative h-64 w-full">
                                        <Image src={img} alt={`${selectedPlace.name} image ${index + 1}`} fill style={{ objectFit: 'cover' }} className="rounded-lg" />
                                    </div>
                                </CarouselItem>
                            ))}
                        </CarouselContent>
                        <CarouselPrevious className="left-4" />
                        <CarouselNext className="right-4" />
                    </Carousel>

                    <div className="pt-4">
                        <CardTitle className="font-headline text-3xl">{selectedPlace.name}</CardTitle>
                        {selectedPlace.justification && (
                          <CardDescription className="mt-2 text-primary bg-primary/10 p-2 rounded-md">
                            <Sparkles className="inline h-4 w-4 mr-2"/>
                            AI Rec: {selectedPlace.justification}
                          </CardDescription>
                        )}
                        <div className="flex items-center justify-between mt-2">
                            <CardDescription className="flex items-center gap-2">
                                <MapPin className="h-4 w-4" /> {selectedPlace.address}
                            </CardDescription>
                            <Link href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(selectedPlace.address)}`} target="_blank" rel="noopener noreferrer">
                                <Button variant="outline">
                                    <MapPin className="mr-2 h-4 w-4" /> Directions
                                </Button>
                            </Link>
                        </div>
                         <div className="flex items-center gap-1 text-lg mt-2">
                            <Star className="w-5 h-5 text-accent fill-accent"/>
                            <span className="font-bold">{selectedPlace.rating}</span>
                            <span className="text-muted-foreground">({selectedPlace.reviewCount} reviews)</span>
                        </div>
                    </div>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="space-y-3 rounded-lg border bg-background/50 p-4">
                        <h3 className="font-semibold">Leave your feedback</h3>
                        <div className="flex items-center gap-2">
                            {[...Array(5)].map((_, i) => (
                                <Star key={i} className="h-6 w-6 text-gray-300 cursor-pointer transition-colors hover:text-accent" />
                            ))}
                        </div>
                        <Textarea placeholder={`What did you think of ${selectedPlace.name}?`} />
                         <div className="flex justify-between items-center">
                            <Button variant="outline" onClick={() => fileInputRef.current?.click()}>
                                <Camera className="mr-2 h-4 w-4" /> Add Photos
                            </Button>
                             <Input type="file" ref={fileInputRef} className="hidden" multiple accept="image/*" />
                            <Button>Submit Review</Button>
                         </div>
                    </div>
                    
                     <div className="space-y-4">
                        <h3 className="font-semibold text-lg">Reviews</h3>
                        {selectedPlace.reviews?.length > 0 ? selectedPlace.reviews.map((review: any, index: number) => (
                            <div key={index} className="flex gap-4 border-t pt-4">
                                <Avatar>
                                    <AvatarImage src={review.avatar} alt={review.author} />
                                    <AvatarFallback>{review.author.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <div className="flex-grow">
                                    <div className="flex items-center justify-between">
                                        <p className="font-semibold">{review.author}</p>
                                        <div className="flex items-center">
                                            {[...Array(review.rating)].map((_, i) => (
                                                 <Star key={i} className="w-4 h-4 text-accent fill-accent"/>
                                            ))}
                                             {[...Array(5 - review.rating)].map((_, i) => (
                                                 <Star key={i} className="w-4 h-4 text-gray-300"/>
                                            ))}
                                        </div>
                                    </div>
                                    <p className="mt-1 text-muted-foreground">{review.comment}</p>
                                    <div className="mt-2 flex items-center gap-4 text-sm text-muted-foreground">
                                        <button className="flex items-center gap-1.5 transition-colors hover:text-primary"><ThumbsUp size={14} /> Helpful</button>

                                        <button className="flex items-center gap-1.5 transition-colors hover:text-primary"><MessageSquare size={14} /> Comment</button>
                                    </div>
                                </div>
                            </div>
                        )) : (
                            <p className="text-sm text-muted-foreground">No reviews yet for this AI-suggested place. Be the first to leave one!</p>
                        )}
                    </div>
                </CardContent>
            </Card>
        ) : (
            <div className="h-full flex items-center justify-center rounded-lg border border-dashed">
                <div className="text-center">
                    {isLoading ? (
                        <>
                            <Loader2 className="mx-auto h-8 w-8 animate-spin text-primary" />
                            <p className="mt-2 text-muted-foreground">AI is searching for places...</p>
                        </>
                    ) : (
                         <p className="text-muted-foreground">Select a place to see details or search with AI.</p>
                    )}
                </div>
            </div>
        )}
      </div>
    </div>
  );
}

    